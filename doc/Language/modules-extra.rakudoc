=begin pod :kind("Language") :subkind("Language") :category("tutorial")

=TITLE Module development utilities

=SUBTITLE What can help you write/test/improve your module(s)

Here is a list of modules that you can find in the Raku ecosystem
which aim to make the experience of developing Raku modules
more fun.


=head1 Module builder and authoring tools

Some modules and tools to help you with generating files that are part
of a module distribution.

=item L<App::Mi6|https://raku.land/zef:skaji/App::Mi6>     Minimal authoring tool for Raku
=item L<META6|https://raku.land/zef:jonathanstowe/META6>        Do things with Raku C<META> files
=item L<rakudoc|https://raku.land/cpan:SOFTMOTH/rakudoc>        Generate documentation end-products

=head1 Tests

Some tests of module quality.

=item L<Test::META|https://raku.land/zef:jonathanstowe/Test::META>      Test your META6.json file
=item L<Test::Output|https://raku.land/github:raku-community-modules/Test::Output>  Test the output to STDOUT and STDERR your program generates
=item L<Test::Screen|https://raku.land/github:skids/Proc::Screen>  Use B<GNU screen> to test full screen VT applications
=item L<Test::When|https://raku.land/zef:raku-community-modules/Test::When>  Control when your tests are run (author testing, online testing, etc.)

=head1 NativeCall

Here some modules to help you work with NativeCall.

=item L<NativeHelpers::Array|https://raku.land/zef:jonathanstowe/NativeHelpers::Array>  Provides routines to deal with CArray
=item L<App::GPTrixie|https://raku.land/github:Skarsnik/App::GPTrixie>                Generate NativeCall code from C headers file
=item L<NativeCall::TypeDiag|https://raku.land/github:Skarsnik/NativeCall::TypeDiag>  Provides routines to test your CStruct


=head1 Sample modules

Modules that exist only as minimalist examples, tests for installers,
or skeletons.

=item L<Foo|https://raku.land/github:ugexe/Foo> A module with two distributions of different versions

=end pod
