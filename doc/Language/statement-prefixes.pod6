=begin pod :tag<perl6>

=TITLE Statement prefixes

=SUBTITLE Prefixes that alter the behavior of a statement of set of them

Statement prefixes are not statements per se. They are written in front of a
statement, and change their meaning, their output, or the moment they are going
to be run. Since they have a specific behavior, they are also sometimes specific
to some statement or statements.

=head2 X<C<lazy>|lazy (statement prefix)>

As a statement prefix, lazy acts in front of any statement, including C<for>
loops, saving the execution for when the variable they are assigned for is
actually needed.

=for code
my $incremented = 0;
my $var = lazy for <1 2 3 4> -> $d {
    $incremented++
};
say $incremented; # OUTPUT: «0␤»
say eager $var;   # OUTPUT: «(0 1 2 3)␤»
say $incremented; # OUTPUT: «4␤»

The C<$incremented> variable is only incremented, that is, the internal part of
the loop is only run, when we eagerly evaluate the variable C<$var> that
contains the lazy loop. Eagerness can be applied on a variable in other ways,
such as calling the C<.eager> method on it.

=for code
my @array = lazy { (^3).map( *² )  };
say @array;       # OUTPUT: «[...]»
say @array.eager; # OUTPUT: «[0 1 4]␤»

This prefix can also be used L<in front of
C<gather>|/language/control#gather/take> to make the inner statements behave
lazily; in general, any set of statements that returns a value will be made
lazy using this.

=head2 X<C<eager>|eager (statement prefix)>

The C<eager> statement prefix will eagerly return the result of the statements
behind, throwing away laziness and returning the result.

=for code
my $result := eager gather { for 1..3 { say "Hey"; take $_² } };
say $result[0]; # OUTPUT: «Hey␤Hey␤Hey␤1␤»

C<gather> is L<implicitly lazy when bound to a scalar|/syntax/gather%20take>.
However, with C<eager> as a statement prefix it will run all three iterations in
the loop, as shown by the printed "Hey", even if we are just requesting the
first one in a row.

=head2 X<C<hyper>|hyper (statement prefix)>, X<C<race>|race (statement prefix)>

C<hyper> and C<race> use (maybe simultaneous) threads to run different
iterations in a loop:

=for code
my @a = hyper for ^100_000 { .is-prime }

This code is around 3x faster than the bare for. But there are a couple of
caveats here:

=item The operation inside the loop should take enough time to make threading
make sense.

=item There should be no read or write access to the same data structure inside
the loop. Let the loop produce a result, and assign it.

=item If there's I/O operation inside the loop, there might be some contention
so please avoid it.

Main difference between C<hyper> and C<race> is the ordering of results. Use
C<hyper> if you need the loop results to be produced in order, C<race> if you
don't care.

=head2 X<C<quietly>|quietly (statement prefix)>

As a statement prefix, C<quietly> suppresses all warnings produced by the
statement it precedes.

=for code
sub marine() {};
quietly say ~&marine; # OUTPUT: «marine␤»

Calling L<C<.Str> on C<code> produces a warning|/type/Code#method_Str>.
Preceding the statement with C<quietly > will just produce the output, the name
of the routine.

=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
