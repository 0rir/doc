=begin pod :tag<perl6>

=TITLE System interaction

=SUBTITLE Working with the underlying operating system and running applications.

=head1 Getting arguments through the command line

The simplest way is to use the L<C<@*ARGS>|/language/variables#index-entry-%24%2AARGS> variable to obtain arguments from the command line; this array will contain the strings that follow the program name. L<C<%*ENV>|/language/variables#Runtime_Environment> will contain the environment variables, so that if you use:

=begin code :lang<shell>
export API_KEY=1967196417966160761fabc1511067
./consume_api.p6
=end code

You can use them from your program this way:

    my $api-key = %*ENV<API_KEY> // die "Need the API key";

This will fail if the environment variable C<API_KEY> has not been defined previously.

Perl 6 has a better way to deal with command line arguments if they represent file names: the L<C<$*ARGFILES>/language/variables#index-entry-%24%2AARGFILES> dynamic variable.

=begin code
for $*ARGFILES.lines -> $l {
    say "Long lines in {$*ARGFILES.path}"
        if $l.chars > 72 ;
}
=end code

You can run this program this way C<argfiles.p6 *.p6>, for instance, and it will print a file name every time it finds a line longer than 72 characters. C<$*ARGFILES> contains filehandles of all files described in the command lines- C<.lines> will read in turn one line from every one of them, changing the value of C<$*ARGFILES.path> every time a new handle is being processed. In general, it provides a very convenient API for scripts that deal with sets of files.

=head1 Running programs synchronously and asynchronously

There are two routines to run external programs: L<C<run>|/routine/run> and L<C<shell>|/routine/shell>. Both exist in the L<C<IO>|/type/IO> role and are thus included in all classes that mix that role in, like L<IO::Path>. Both return a L<Proc> object, but the main difference is that C<run> will try to avoid the system shell, if possible, while C<shell> will run the command through the default system shell.

The key class for running all external programs is L<Proc::Async>, which runs processes asynchronously and allows L<concurrent|/language/concurrency#Proc::Async> concurrent interaction with the running processes. In general, it is a good practice to interact with the system through these high-level, abstract interfaces. However, Perl 6 provides with other ways of interacting with the system through a low-level interface.

=head1 Making operating system calls through the native API

TBD


=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
