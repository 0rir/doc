=begin pod :tag<perl6>

=TITLE Traits

=SUBTITLE Compile-time specification of behavior made easy.

In general, L<traits|https://en.wikipedia.org/wiki/Trait_(computer_programming)>
are used to change the behavior of a class, by mixing in attributes and methods
or changing the implementation. That kind of concept is implemented in Perl 6
via L<roles|/language/glossary#Roles>; in this context, Perl 6 calls I<traits>
specifically those that change the internal representation of the class or type.

Traits are used extensively in L<native calls|/language/nativecall> to
L<specify the
representation|/language/nativecall#Specifying_the_native_representation> of the
data structures that are going to be handled by the native functions via the
C<is repr> suffix; at the same time, C<is native> is used for the routines that
are actually implemented via native functions. These are the representations
that can be used:

=item X<CStruct> corresponds to a C<struct> in the C language. It is a composite
data structure which includes different and heterogeneous lower-level data
structures; see L<this|/language/nativecall#Structs> for examples and further
explanations.

=item X<CPPStruct>, similarly, correspond to a C<struct> in C++. However, this
is Rakudo specific for the time being.

=item X<CPointer> is a pointer in any of these languages. It is a dynamic data
structure that must be instantiated before being used, can be
L<used|/language/nativecall#Basic_use_of_Pointers> for classes whose methods are
also native.

=item X<CUnion> is going to use the same representation as an C<union> in C; see
L<this|/language/nativecall#CUnions> for an example.

On the other hand, X<P6opaque> is the default representation used for all
objects in Perl 6.

    m: class Thar {};
    say Thar.REPR;    #OUTPUT: «P6opaque␤»

The L<meta object protocol|/language/mop> uses it by default for every object
and class unless specified otherwise; for that reason, it is in general not
necessary unless you are effectively working with that interface.

The X<Uninstantiable representation trait> is not so much related to the
representation as related to what can be done with an specific class; it
effective prevents the creation of instances of the class via C<new>

=begin code
constant @IMM = <Innie Minnie Moe>;

class don't-instantiate is repr('Uninstantiable') {
    my $.counter;

    method imm () {
        return @IMM[ $.counter++ mod @IMM.elems ];
    }
}
say don't-instantiate.imm for ^10;
=end code

Uninstantiable classes can still be used via their class variables and methods, as above. However, trying to instantiate them this way: C<my $do-instantiate = don't-instantiate.new;> will yield the error C<You cannot create an instance of this type (don't-instantiate)>.


=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
