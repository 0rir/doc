=begin pod :kind("Type") :subkind("class") :category("basic")

=TITLE class Format

=SUBTITLE Convert values to a string given a format specification

    class Format { }

A C<Format> is an immutable object containing the logic for
converting a set of values to a string given a C<sprintf>
compatible format specification.  Acts as a standard string
in every way, except that it can also be called as a L<C<Callable>|/type/Callable>
with arguments to produce a string, just as C<sprintf>.

Available as of the 2023.06 release of the Rakudo compiler.
Requires language level C<6.e>.

=begin code :solo
use v6.e.PREVIEW;
my $f = Format.new("'%5s'");
say $f;                         # OUTPUT: «'%5s'␤»
say $f("foo");                  # OUTPUT: «'  foo'␤»
=end code

=head1 Methods

=head2 method new

=begin code :skip-test<difficult to use v6e.PREVIEW here>
method new($format --> Format:D)
=end code

Creates a new C<Format> object from a C<sprintf> compatible format
string.

=begin code :solo
use v6.e.PREVIEW;
my $d = Format.new("%05d");
say $d;                         # OUTPUT: «%05d␤»
say $d(42);                     # OUTPUT: «00042␤»
=end code

=head2 method Callable

    method Callable(--> Callable:D)

Returns the L<C<Callable>|/type/Callable> that was created from the given format.
Intended for introspection purposes only, as one can call the
C<Format> object directly.

=head2 method directives

    method directives(--> List:D)

Returns a list of the directives seen in the given format.
Intended for introspection purposes.

=begin code :solo
use v6.e.PREVIEW;
my $d = Format.new("%05d%3x:%s");
say $d.directives;              # OUTPUT: «(d x s)␤»
=end code

=head2 method arity

    method arity(--> List:D)

Returns the B<minimal> number of positional arguments that is
needed for this format.  Intended for introspection purposes.

=begin code :solo
use v6.e.PREVIEW;
my $d = Format.new("%05d%3x:%s");
say $d.arity;                   # OUTPUT: «3␤»
=end code

=head2 method count

    method count(--> List:D)

Returns the B<maximal> number of positional arguments that is
needed for this format.  Intended for introspection purposes.

=begin code :solo
use v6.e.PREVIEW;
my $d = Format.new("%05d%3x:%s");
say $d.count;                   # OUTPUT: «3␤»
=end code

=end pod
