=begin pod :kind("Type") :subkind("class") :category("domain-specific")

=TITLE class IO::Notification

=SUBTITLE Asynchronous notification for file and directory changes
X<|FileChangeEvent (enum)>
X<|FileChanged (FileChangeEvent)>
X<|FileRenamed (FileChangeEvent)>
=for code
enum FileChangeEvent (:FileChanged(1), :FileRenamed(2));
=for code :skip-test<compile time error>
class IO::Notification {}


Essentially, this class exists for the C<IO::Notification.watch-path($path)>
method, that produces a L<Supply|/type/Supply>
of L<C<IO::Notification::Change>|/type/IO::Notification::Change> events for a
file or directory.

=head1 Methods

=head2 method watch-path

=for code
method watch-path(IO::Notification: Str() $path, :$scheduler = $*SCHEDULER)

Returns a L<Supply|/type/Supply> that emits C<IO::Notification::Change> objects.

If C<$path> is a file, only modifications of that file are reported. If
C<$path> is a directory, both modifications to the directory itself (for
example permission changes) and to files in the directory (including new
files in the directory) are reported.

C<:$scheduler> allows you to specify which thread scheduler is
responsible for the notification stream.

=end pod
