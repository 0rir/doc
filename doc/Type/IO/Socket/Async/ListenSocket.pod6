=begin pod :kind("Type") :subkind("class") :category("domain-specific")

=TITLE class IO::Socket::Async::ListenSocket

=SUBTITLE A tap for listening sockets

    class IO::Socket::Async::ListenSocket is Tap {}

C<IO::Socket::Async::ListenSocket> is returned by the C<tap
method|/type/Supply#method_tap> when called on the L<Supply|/type/Supply>
returned by calling the L<listen method|/type/IO::Socket::Async#method_listen>
of L<IO::Socket::Async|/type/IO::Socket::Async>:

=begin code
my $listener = IO::Socket::Async.listen('127.0.0.1', 0).tap: -> $peer {
    $peer.print: "Hello. Good-bye\n";
    $peer.close;
}

my $host = await $tap.socket-host;
my $port = await $tap.socket-port;

say "The rude service is listening on $host:$port for the next 10 seconds...";

sleep 10;
$listener.close;

say "I'm done now.";
=end code

Alternatively, by using the C<do> prefix to C<whenever>, you can also get it while inside a C<react> block:

=begin code
my $listener;
react {
    $listener = do whenever IO::Socket::Async.listen('127.0.0.1', 0) -> $peer {
        $peer.print: "Hello. Good-bye\n";
        $peer.close;
    }
}

$listener.close;
=end code

=head1 Methods

This object cannot be constructed. It is only returned when tapping the L<Supply|/type/Supply> returned by the L<listen method|/type/IO::Socket::Async#method_listen>.

=head2 method socket-host

    method socket-host(--> Promise)

Returns a L<Promise|/type/Promise> that will be kept with a string containing the local listening host name.

=head2 method socket-port

    method socket-port(--> Promise)

Returns a L<Promise|/type/Promise> that will be kept with the port number of the listening socket.

=head2 method close

    method close()

Closes the listening socket as well as closing the tap.

=end pod
