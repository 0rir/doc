=begin pod :kind("Type") :subkind("class") :category("basic")

=TITLE class RakuAST::Doc::Block

=SUBTITLE 

    class RakuAST::Doc::Block { }

The C<RakuAST::Doc::Block> class contains the information about a
C<RakuDoc> block.

Support for C<RakuAST> functionality is available in language version
C<6.e+> and was added in Rakudo compiler release 2023.02.  In earlier
language versions it is only available when specifying:

    use experimental :rakuast;

=head2 Object introspection

C<RakuAST::Doc::Block> objects are typically created when parsing
Raku Programming Language code that has C<RakuDoc> markers in it.
So most developers will only need to know how to introspect the
objects created.

=head3 method type

    say "type = $block.type()";

Returns the type of the block.

=head3 method level

    say "level = $block.level()";

Returns a string associated with the level.  If the level is B<0>, then
it will return an empty string.  Otherwise it will return the
stringification of the integer value.

=head3 method config

    say "allows: $_"
      with $block.config<allow> andthen .literalize;

Returns the C<Map> with any configuration.  Note that you can get
any constant values by calling the C<.literalize> method on them.
See also C<resolved-config>.

=head3 method resolved-config

    say "allows: $_" with $block.resolved-config<allow>;

Returns the C<Map> with any configuration, with the values already
resolved to "normal" Raku objects.  See also C<config>.

Is available by default if the object was created by the Raku
grammar.  If the object was created "manually", then the
C<literalize-config> method must be called once first.

=head3 method paragraphs

    for $block.paragraphs {
        say $_;
    }

Returns a C<List> of the paragraphs.  Note that each element can
either be a string, a C<RakuAST::Doc::Paragraph> or another
C<RakuAST::Doc::Block> object.

=head3 method delimited

    with $block {
        say "=begin $_.type" if .block;
    }

Returns a C<Bool> indicating the block is a delimited block (aka
with a C<=begin> and a C<=end>.

=head3 method for

    with $block {
        say "=for $_.type" if .for;
    }

Returns a C<Bool> indicating the block is an extended block (aka
with just a C<=for>.

=head3 method abbreviated

    with $block {
        say "=$_.type" if .abbreviated;
    }

Returns a C<Bool> indicating the block is an abbreviated block
(aka with just C<=> followed by the type, e.g. C<=foo>).

=head3 method directive

    with $block {
        say "=$_.type" if .directive;
    }

Returns a C<Bool> indicating the block is a RakuDoc directive
(aka with just C<=> followed by the type, e.g. C<=row>).

=head3 method allowed-markup

    my %*OK := $block.allowed-markup;
    say "B markup is allowed" if %*OK<B>;

Returns a special purpose C<Map> that can be checked to see whether
a given markup type is allowed in the block, assuming C<RakuDoc>
semantics.  Usually C<bound> to a dynamic variable, so it can be
accessible for rendering all inner C<RakuAST::Doc::Markup> objects.

Three types of C<Map>s can be returned:
=item a real C<Map> from the C<:allow> configuration
=item a subclass of C<Map> that returns C<True> for all uppercase letters
=item a subclass of C<Map> that always returns C<False>

=head3 method Str

    put $block;  # bar‚ê§

Returns the string for the paragraphs of the block, with any
markup also stringified.

=head3 method raku

   # method .gist falls back to .raku
   say $block;  # RakuAST::Doc::Block.new(...

Returns the string that is needed for the creation of the block
using C<RakuAST> calls.

=head1 Object creation

One seldomly creates C<RakuAST::Doc::Block> objects directly.  This
documentation is intended for those few people who'd like to devise
their own way of programmatically building a C<RakuAST::Doc::Block>
object.

=head2 method new

    method new(
      Str:D  :$type!,        # type of block, e.g. "head"
      Int:D  :$level = 0     # level of block, e.g. 1 for "=head1"
             :%config,       # any configuration to be applied
      Str:D  :$margin = "",  # left margin (0 or more spaces)
             :@paragraphs    # paragraphs of this block
      Bool:D :$for,          # this is a =for block
      Bool:D :$abbreviated,  # this is an abbreviated block
      Bool:D :$directive,    # this is a directive (also abbreviated)
    );

The C<new> method can be called to create a new C<RakuAST::Doc::Block>
object.  It only takes named arguments, with the C<:type> argument
being mandatory.

=begin code :lang<raku>
  =begin foo
  bar
  =end foo

my $block = RakuAST::Doc::Block.new(
  :margin("  "),
  :type<foo>,
  :paragraphs("bar\n",)
);
=end code

Note that the paragraphs should B<not> contain the left margin whitespace.

=head3 :type

The type of block: this is a string with the name.  Required.  Any name
is allowed, but the C<RakuDoc> standard assigns semantics to some names.
When these are used, it is assumed that the behaviour of the block will
adhere to the C<RakuDoc> standard semantics.

=head3 :level

The level of the block, specified as an integer value, defaults to
0.  Some blocks in C<RakuDoc> can have a number associated with the
name, such as C<=item1> and C<=head2>.

=head3 :config

Any config to be associated with this block, defaults to none.
Specified as an C<Associative>.  Note that when specified, the
values B<must> be C<RakuAST::> objects.  So something like:

    frobnicate => 42

should be specified as:

    frobnicate => RakuAST::IntLiteral.new(42)

=head3 :margin

The left margin to be applied, specifically when deparsing.  Should
consist of 0 or more spaces.  Defaults to the empty string.

=head3 :paragraphs

The actual content of the block, specified as a C<Positional>.
Each element can either be a string, aC<RakuAST::Doc::Paragraph>
or another C<RakuAST::Doc::Block> object.  In the case of a string,
it is assumed that the C<:margin> has already been removed from each
line in the string.

=head3 :for, :abbreviated, :directive

Mutually exclusive indication of the format of the block, mostly
used in deparsing.  If C<:for> is specified, it is assumed to be a
C<=for> block.  If C<:abbreviated> is specified, then it is assumed
to be a C<=$type> block.  If C<:directive> is specified, then is
assume to be an abbreviated block that can B<only> occur as an
abbreviated block B<and> has special C<RakuDoc> semantics (e.g.
C<=row> or C<=column>).

If neither of these are specified, then a "delimited block" (one
with a C<=begin> and an C<=end> will be assumed.

=head2 method from-paragraphs

Create a C<RakuAST::Doc::Block> from a number of strings to be
considered paragraphs.  Strings are assumed to B<not> have removed
the left margin yet.

=begin code :lang<raku>
  =begin foo
  bar
  =end foo

my $block = RakuAST::Doc::Block.from-paragraphs(
  :margin("  "),
  :type<foo>,
  :paragraphs("  bar\n",)
);
=end code

Takes the same arguments as C<new>.  Note that the paragraphs should
only contain strings and should B<not> contain the left margin
whitespace.  A C<worry>/C<warning> will be issued if the left margin
of a string is less than the margin indicated with C<:margin>.

Also note that C<RakuDoc> semantics will be applied, such as:
=item implicit code blocks
=item automatic row/column detection for C<=table>
=item markup detection where (implicitly)  activated

=head1 Object modification

=head2 method set-margin

    $block.set-margin("    ");

Set the margin to the given value, which is expected to be the empty
string or 1 more spaces.

=head2 method set-type

    $block.set-type("foo");

Set the type to the given value, which is expected to be a string.

=head2 method set-level

    $block.set-level(1);

Set the level to the given value, which is expected to be an integer.

=head2 method set-config

    $block.set-config({
      numbered => RakuAST::Term::True.new;
    });

Set the configuration to the given value, which is expected to be
an C<Associatve> of which the values are C<RakuAST> objects.

=head2 method add-config

    $block.add-config(
      'allow',
      RakuAST::QuotedString.new(
        processors => <words val>,
        segments   => (
          RakuAST::StrLiteral.new("B C"),
        )
      )
    );

Takes a key and a value to add to the configuration.  Value is
expected to be either a string or a C<RakuAST> object.

=head2 method set-paragraphs

    $block.set-paragraphs( ("foo\n\n","bar\n") );

Set the paragraphs to the given C<Positional>.  Values are expected
to be either a string, or a C<RakuAST::Doc::Paragraph> object.

=head2 method add-paragraph

    $block.add-paragraph("baz\n\n");

Add a paragraph: should be a string, or a C<RakuAST::Doc::Paragraph>
object.

=head2 method literalize-config

    $block.literalize-config;
    say "allowed are: $block.resolved-config<allowed>";

Recursively literalizes the C<config> of the block (if any) and
puts the result in C<resolved-config>.

If the object was created from the Raku grammar, then there is
no need to call this method ever, as it will have been called
as part of the C<CHECK> phaser checks already.

=end pod
