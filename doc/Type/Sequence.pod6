=begin pod :kind("Type") :subkind("role") :category("basic")

=TITLE class Sequence

=SUBTITLE Operations for higher-level sequences

    class Sequence does PositionalBindFailover { }

A C<Sequence> implements a series of methods for converting high-level
C<Seq>s into different types of objects, from positional to other.

=head1 Methods

=head2 method eager

    method eager(::?CLASS:D: --> List:D)

Returns an eagerly evaluated L<List|/type/List> based on the invocant
sequence, and marks it as consumed.
If called on an already consumed sequence, throws an error of type
L<X::Seq::Consumed|/type/X::Seq::Consumed>.

    my $s = lazy 1..5;

    say $s.is-lazy; # OUTPUT: «True␤»
    say $s.eager;   # OUTPUT: «(1 2 3 4 5)␤»

    say $s.eager;
    CATCH {
        when X::Seq::Consumed {
            say 'Throws exception if already consumed';
        }
    }
    # OUTPUT: «Throws exception if already consumed␤»

=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
