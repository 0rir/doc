=begin pod :kind("Type") :subkind("class") :category("exception")

=TITLE class X::Str::Match::x

=SUBTITLE Invalid argument type for :x argument to Str matching methods

    class X::Str::Match::x is Exception { }

Error thrown (or wrapped in a L<C<Failure>|/type/Failure>) if an invalid type is passed to the
C<:x> argument of C<Str.match> or C<Str.subst>. Only L<C<Numeric>|/type/Numeric> and
L<C<Range>|/type/Range> types are allowed.

For example

    say "foobar".match("o",:x<hello>);
    CATCH { default { put .^name, ': ', .Str } };
    # OUTPUT: «X::Str::Match::x: in Str.match, got invalid value of type Str for :x, must be Int or Range␤»

=head1 Methods

=head2 method source

    method got(--> Str:D)

Returns the type of the invalid argument.

=end pod
