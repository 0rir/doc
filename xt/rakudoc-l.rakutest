#!/usr/bin/env raku

=begin overview

Check any L<> references for validity.

=end overview

use Test;
use lib $*PROGRAM.parent(2).child('lib');

use Test-Files;
use Pod::Convenience;

my @files = Test-Files.pods;

if @files {
    plan +@files;
} else {
    plan :skip-all<No rakudoc files specified>
}

sub is-valid-link($links) {
    for @$links -> $link {
        if $link.starts-with('/') {
            if $link.contains('.html') {
                flunk "$link contains .html";
            }
            if $link eq "/" {
                pass "$link exists (generated)";
                return;
            }
            if $link ~~ / '/language/independent-routines' '#'? / {
                pass "$link exists (generated)";
                return;
            }
            if $link ~~ / '/index' '#'? / {
                pass "$link exists (generated)";
                return;
            }
            if $link ~~ / '/introduction' '#'? / {
                pass "$link exists (generated)";
                return;
            }
            if $link ~~ / '/reference' '#'? / {
                pass "$link exists (generated)";
                return;
            }

            # This may be overeager, is needed for Types
            my $original = $link.subst('::','/', :g);

            # We don't handle fragments yet
            $original ~~ s/ '#' .* //;

            # split into components
            my @path = $original.split('/')[1..*];
            next if @path[0] eq 'routine' | 'syntax'; # these are not primary sources, skip for now

            # Path elements in links should be lower case
            my $local-path = @path[0];

            if $local-path.fc ne $local-path {
                flunk "$link should be lower case";
                next;
            }

            # Folders are title-cased on disk
            @path[0] = @path[0].tc;

            # Look in doc/ folder for this rakudoc file.
            @path.unshift: 'doc';
            my $path = @path.join('/');

            ok ($path.IO.d or ($path ~ '.rakudoc').IO.e), "$link exists (primary)";
        }
    }
}

sub walk-content($x) {
    for $x.contents -> $contents {
        next unless $contents;
        for @$contents -> $item {
            if $item ~~ Pod::FormattingCode and $item.type eq 'L' {
                # L<X> has an empty meta but renders as if it were L<X|X>, explicitly set this
                unless $item.meta {
                    $item.meta = $item.contents.join;
                }
                is-valid-link($item.meta);
            } elsif $item !~~ Str {
                walk-content($item);
            }
        }
    }
}

for @files -> $file {
    my @chunks = extract-pod($file).contents;

    # This emits pass or flunk for each local L<> found.
    subtest $file => {
        walk-content($_) for @chunks;
    }
}
